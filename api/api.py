import os


from fastapi import FastAPI, Query, UploadFile, Form, HTTPException
from fastapi.responses import JSONResponse, FileResponse, HTMLResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import xarray as xr
import json
import numpy as np
from geopy.distance import geodesic
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from netCDF4 import Dataset
import cartopy.feature as cfeature
from matplotlib.colors import Normalize, LinearSegmentedColormap
from math import radians, degrees, sin, cos, atan2, sqrt, asin, floor, ceil, tan, pi, log
from PIL import Image
from environs import Env
import math
import zipfile
import uuid
import folium
from fastapi.staticfiles import StaticFiles
from shapely.geometry import Polygon, mapping, Point
from shapely.ops import unary_union
import mercantile
from io import BytesIO

TILE_SIZE = 256  # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
GRID_RADIUS_KM = 250  # –†–∞–¥–∏—É—Å —Å–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
GRID_SIZE = 512  # –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (512x512 —Ç–æ—á–µ–∫)

# üìå –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
CENTER_LAT = 55.0
CENTER_LON = 37.0

# üìå –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
CELL_SIZE_KM = (GRID_RADIUS_KM * 2) / GRID_SIZE

# üìå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
KM_PER_DEGREE_LAT = 110.574  # 1¬∞ —à–∏—Ä–æ—Ç—ã ‚âà 110.574 –∫–º
KM_PER_DEGREE_LON = lambda lat: 111.32 * math.cos(math.radians(lat))  # –î–æ–ª–≥–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∏—Ä–æ—Ç—ã

def calculate_bearing_from_grid(i, j, lat_size, lon_size, pixel_size):
    """
    üìå –í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (bearing) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ç–∫–∏.
    """
    # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (dx, dy)
    dx = (j - lon_size // 2) * pixel_size
    dy = (i - lat_size // 2) * pixel_size

    # üìå –í—ã—á–∏—Å–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    bearing = math.degrees(math.atan2(dy, dx))  

    return bearing

def rotate_point(x, y, angle):
    """
    üìå –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–æ—á–∫—É (`x, y`) –Ω–∞ `angle` –≥—Ä–∞–¥—É—Å–æ–≤ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ (0,0).
    """
    angle_rad = math.radians(angle)
    cos_a = math.cos(angle_rad)
    sin_a = math.sin(angle_rad)

    x_rot = x * cos_a - y * sin_a
    y_rot = x * sin_a + y * cos_a

    return x_rot, y_rot

def haversine(lat1, lon1, lat2, lon2):
    """
    üìå –§–æ—Ä–º—É–ª–∞ –•–∞–≤–µ—Ä—Å–∏–Ω–∞ ‚Äì –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
    """
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º

def lonlat_to_nxny(lon, lat, center_lat, center_lon, nx_max, ny_max, bearing_angle):
    """
    üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–æ–ª–≥–æ—Ç—É/—à–∏—Ä–æ—Ç—É –≤ –∏–Ω–¥–µ–∫—Å—ã `nx, ny`, —É—á–∏—Ç—ã–≤–∞—è —É–≥–æ–ª `bearing_angle`.
    """
    dx_km = (lon - center_lon) * KM_PER_DEGREE_LON(center_lat)
    dy_km = (lat - center_lat) * KM_PER_DEGREE_LAT

    # üîÑ –ü–æ–≤–æ—Ä–æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É—á–µ—Ç–æ–º `bearing`
    dx_km, dy_km = rotate_point(dx_km, dy_km, -bearing_angle)

    nx = nx_max // 2 + int(dx_km / (2 * GRID_RADIUS_KM / nx_max))
    ny = ny_max // 2 - int(dy_km / (2 * GRID_RADIUS_KM / ny_max))  # –ò–Ω–≤–µ—Ä—Å–∏—è Y (–≤–µ—Ä—Ö -> –Ω–∏–∑)

    # üìå –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    nx = max(0, min(nx, nx_max - 1))
    ny = max(0, min(ny, ny_max - 1))

    return nx, ny


def from_pixel_to_lonlat(xp, yp, zoom):
    """
    üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (xp, yp) –≤ —à–∏—Ä–æ—Ç—É/–¥–æ–ª–≥–æ—Ç—É.
    """
    PixelsAtZoom = 256 * 2**zoom
    half_size = PixelsAtZoom / 2

    lon = (xp - half_size) * (360 / PixelsAtZoom)
    lat = (2 * math.atan(math.exp((yp - half_size) / -(PixelsAtZoom / (2 * math.pi)))) - math.pi / 2) * (180 / math.pi)

    return lon, lat


def find_closest_node(nx, ny, data):
    """
    üìå –ò—â–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—á–∫—É –≤ —Å–µ—Ç–∫–µ (`nx, ny`).
    """
    if 0 <= nx < data.shape[1] and 0 <= ny < data.shape[0]:  # !!! –í–ê–ñ–ù–û: `shape = (ny, nx)`
        return data[ny, nx]  # !!! –í–ê–ñ–ù–û: `ny` –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º!

    min_dist = float("inf")
    closest_val = np.nan

    for i in range(max(0, ny - 2), min(data.shape[0], ny + 2)):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ `ny`
        for j in range(max(0, nx - 2), min(data.shape[1], nx + 2)):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ `nx`
            if not np.isnan(data[i, j]):
                dist = math.sqrt((nx - j) ** 2 + (ny - i) ** 2)  # !!! –í–ê–ñ–ù–û: `(nx, ny) ‚Üí (j, i)`
                if dist < min_dist:
                    min_dist = dist
                    closest_val = data[i, j]

    return closest_val

def get_tile_data(nc_file, variable, x, y, zoom, center_lat, center_lon, slice_index=0):
    """
    üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Ç–∞–π–ª–∞.
    """
    try:
        ds = xr.open_dataset(nc_file)
        if variable not in ds.variables:
            raise HTTPException(status_code=400, detail=f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏
        dims = ds.dims
        if "time" in dims:
            time_dim = dims["time"]
        else:
            time_dim = 1  # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–æ –æ–¥–Ω–æ

        ny_max, nx_max = dims.get("ny", 0), dims.get("nx", 0)  # –†–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏ (ny, nx)

        if nx_max == 0 or ny_max == 0:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏")

        # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `slice_index` –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        # if slice_index >= time_dim:
        #     raise HTTPException(status_code=400, detail=f"slice_index {slice_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (0-{time_dim-1})")

        # üìå –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        data_array = ds[variable].values

        if data_array.ndim == 3:
            if slice_index >= data_array.shape[0]:
                print(f"–ò–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–∑–∞ {slice_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã ({data_array.shape[0]}).")
                return None
            data = data_array[slice_index, :, :]
        else:
            data = data_array[:, :]

        data = np.squeeze(data)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏

        lat_size, lon_size = data.shape

        # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π–ª–∞
        x1, y1 = x * TILE_SIZE, y * TILE_SIZE
        x2, y2 = x1 + TILE_SIZE, y1 + TILE_SIZE

        # üìå –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–π–ª
        tile_data = np.full((TILE_SIZE, TILE_SIZE), np.nan)

        for yi in range(y1, y2):
            for xi in range(x1, x2):
                lon, lat = from_pixel_to_lonlat(xi, yi, zoom)

                if haversine(lat, lon, center_lat, center_lon) > GRID_RADIUS_KM:
                    continue  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ—Ç –ø–∏–∫—Å–µ–ª—å

                bearing_angle = calculate_bearing_from_grid(yi, xi, lat_size, lon_size, 1000)
                nx, ny = lonlat_to_nxny(lon, lat, center_lat, center_lon, nx_max, ny_max, bearing_angle)
                tile_data[yi - y1, xi - x1] = find_closest_node(nx, ny, data)

        ds.close()
        return tile_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))