from netCDF4 import Dataset
from environs import Env
from io import BytesIO
from datetime import datetime
import xarray as xr
import numpy as np
import os
import math
from math import radians, degrees, sin, cos, atan2, sqrt, asin, floor, ceil, tan, pi, log
import zipfile
from typing import Tuple, Optional

env = Env()
env.read_env()

TILE_SIZE = 256  # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
GRID_RADIUS_KM = 250  # –†–∞–¥–∏—É—Å —Å–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
GRID_SIZE = 512  # –†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (512x512 —Ç–æ—á–µ–∫)

# üìå –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
CELL_SIZE_KM = (GRID_RADIUS_KM * 2) / GRID_SIZE

# üìå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
KM_PER_DEGREE_LAT = 110.574  # 1¬∞ —à–∏—Ä–æ—Ç—ã ‚âà 110.574 –∫–º
KM_PER_DEGREE_LON = lambda lat: 111.32 * math.cos(math.radians(lat))  # –î–æ–ª–≥–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∏—Ä–æ—Ç—ã

def parse_folder_structure(base_path):
    time_periods = []

    for year in sorted(os.listdir(base_path)):
        year_path = os.path.join(base_path, year)
        if not os.path.isdir(year_path) or not year.isdigit():
            continue

        for month in sorted(os.listdir(year_path)):
            month_path = os.path.join(year_path, month)
            if not os.path.isdir(month_path) or not month.isdigit():
                continue

            for day in sorted(os.listdir(month_path)):
                day_path = os.path.join(month_path, day)
                if not os.path.isdir(day_path) or not day.isdigit():
                    continue

                for hour in sorted(os.listdir(day_path)):
                    hour_path = os.path.join(day_path, hour)
                    if not os.path.isdir(hour_path) or not hour.isdigit():
                        continue

                    for minute in sorted(os.listdir(hour_path)):
                        minute_path = os.path.join(hour_path, minute)
                        if not os.path.isdir(minute_path) or not minute.isdigit():
                            continue

                        try:
                            timestamp = datetime(int(year), int(
                                month), int(day), int(hour), int(minute))
                            time_periods.append(
                                (timestamp.isoformat(), minute_path))
                        except ValueError:
                            print(
                                f"Skipping invalid date: {year}-{month}-{day} {hour}:{minute}")

    return time_periods

def get_file_path(time_data, timestamp, all=False):
    for time_iso, folder_path in time_data:

        if time_iso == timestamp:
            if not all:
                zip_path = find_zip_file(folder_path)
                if not zip_path:
                    raise HTTPException(
                        status_code=404, detail="ZIP file not found")

                nc_file_path = extract_nc_file(zip_path)
                if not nc_file_path:
                    raise HTTPException(
                        status_code=404, detail="No .nc file found in ZIP")

                return nc_file_path
            else:
                return find_all_zip_files(folder_path)

def extract_nc_file(zip_path):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        for file_name in zip_ref.namelist():
            if file_name.endswith(".nc"):
                extracted_path = zip_ref.extract(
                    file_name, os.path.dirname(zip_path))
                return extracted_path
    return None


def find_zip_file(folder_path):
    for file in os.listdir(folder_path):
        if file.endswith(".zip"):
            return os.path.join(folder_path, file)
    return None


def find_all_zip_files(folder_path):
    files = []
    for file in os.listdir(folder_path):
        if file.endswith(".zip"):
            files.append(os.path.join(folder_path, file))
    return files


def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º


def from_pixel_to_lonlat(xp, yp, zoom):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —à–∏—Ä–æ—Ç—É/–¥–æ–ª–≥–æ—Ç—É —Å —É—á–µ—Ç–æ–º –º–µ—Ä–∫–∞—Ç–æ—Ä—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏"""
    PixelsAtZoom = 256 * 2**zoom
    half_size = PixelsAtZoom / 2
    
    lon = (xp - half_size) * (360 / PixelsAtZoom)
    lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * (yp / PixelsAtZoom))))
    lat = math.degrees(lat_rad)
    
    return lon, lat

def latlon_to_pixel_xy(lat, lon, zoom):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç lat/lon –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç—ã"""
    lat_rad = math.radians(lat)
    pixel_x = ((lon + 180) / 360) * 256 * 2**zoom
    pixel_y = (1 - (math.log(math.tan(lat_rad) + 1/math.cos(lat_rad)) / math.pi)) / 2 * 256 * 2**zoom
    return pixel_x, pixel_y

def calculate_tiles_in_radius(lat, lon, radius_km=250, zoom=12):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–ª—ã –∫–∞—Ä—Ç—ã, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ —Ä–∞–¥–∏—É—Å –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - lat, lon: —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    - radius_km: —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 250 –∫–º)
    - zoom: —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (x, y) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ç–∞–π–ª–æ–≤
    - –ì—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (min_x, max_x, min_y, max_y)
    """
    print(lat, lon, radius_km, zoom)
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    EARTH_RADIUS = 6371  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    TILE_SIZE = 256  # —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    
    # 1. –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    lat_rad = math.radians(lat)
    lon_rad = math.radians(lon)
    
    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–ª–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö)
    delta = radius_km / EARTH_RADIUS
    
    # 3. –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    min_lat = lat - math.degrees(delta)
    max_lat = lat + math.degrees(delta)
    
    delta_lon = math.asin(math.sin(delta) / math.cos(lat_rad))
    min_lon = lon - math.degrees(delta_lon)
    max_lon = lon + math.degrees(delta_lon)
    
    # 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç–∞–π–ª—ã
    def deg2num(lat_deg, lon_deg, zoom):
        lat_rad = math.radians(lat_deg)
        n = 2.0 ** zoom
        xtile = int((lon_deg + 180.0) / 360.0 * n)
        ytile = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi * n))
        return (xtile, ytile)
    
    # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–ª—ã –¥–ª—è —É–≥–ª–æ–≤—ã—Ö —Ç–æ—á–µ–∫
    x_min, y_max = deg2num(max_lat, min_lon, zoom)  # –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    x_max, y_min = deg2num(min_lat, max_lon, zoom)  # –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    
    # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–π–ª—ã –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    tiles = []
    for x in range(x_min, x_max + 1):
        for y in range(y_min, y_max + 1):
            tiles.append((x, y))
    
    return tiles

def precalculate_tile_coords_dataset(ds, zoom, x, y, center_lat, center_lon, nx_max, ny_max, tile_size=TILE_SIZE):
    """
    üìå –î–æ–±–∞–≤–ª—è–µ—Ç –≤ Dataset –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–π–ª–æ–≤, –ø–æ–ø–∞–¥–∞—é—â–∏—Ö –≤ —Ä–∞–¥–∏—É—Å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ —Ç–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞.
    """
    zoom_str = f"zoom_{zoom}"
    radius_km = ds.attrs.get("radius_view", 250.0)

    lat_size, lon_size = 504, 504
    
    lon_arr = np.full((tile_size, tile_size), np.nan)
    lat_arr = np.full((tile_size, tile_size), np.nan)
    nx_arr = np.full((tile_size, tile_size), 0)
    ny_arr = np.full((tile_size, tile_size), 0)
    
    # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–π–ª–∞
    x1, y1 = x * TILE_SIZE, y * TILE_SIZE
    x2, y2 = x1 + TILE_SIZE, y1 + TILE_SIZE
    has_valid_pixels = False

    #print(nx_max, ny_max)

    for yi in range(y1, y2):
        for xi in range(x1, x2):
            #print(1)
            
            lon, lat = from_pixel_to_lonlat(xi, yi, zoom)
            distance = haversine(lat, lon, center_lat, center_lon)

            #print(distance)
            
            if distance <= radius_km:
                bearing_angle = calculate_bearing_from_grid(yi, xi, nx_max, ny_max, 1000)
                nx, ny = lonlat_to_nxny(lon, lat, center_lat, center_lon, nx_max, ny_max, bearing_angle)
                
                
                lon_arr[yi - y1, xi - x1] = lon
                lat_arr[yi - y1, xi - x1] = lat
                nx_arr[yi - y1, xi - x1] = nx
                ny_arr[yi - y1, xi - x1] = ny
                has_valid_pixels = True

    updated_ds = ds.copy()
    updated_ds[f"lon_{zoom_str}"] = (("tile_y", "tile_x"), lon_arr)
    updated_ds[f"lat_{zoom_str}"] = (("tile_y", "tile_x"), lat_arr)
    updated_ds[f"nx_{zoom_str}"] = (("tile_y", "tile_x"), nx_arr)
    updated_ds[f"ny_{zoom_str}"] = (("tile_y", "tile_x"), ny_arr)

    if "tile_x" not in updated_ds.coords:
        updated_ds = updated_ds.assign_coords(tile_x=np.arange(tile_size))
    if "tile_y" not in updated_ds.coords:
        updated_ds = updated_ds.assign_coords(tile_y=np.arange(tile_size))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–ª–µ
    if "valid_tiles" not in updated_ds.attrs:
        updated_ds.attrs["valid_tiles"] = []
    updated_ds.attrs["valid_tiles"].append(f"{zoom}_{x}_{y}")

    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–∞–π–ª–∞ z={zoom}, x={x}, y={y} (–≤ —Ä–∞–¥–∏—É—Å–µ {radius_km}–∫–º)")
    return updated_ds

KM_PER_DEGREE_LAT = 111.32  # –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã
GRID_RADIUS_KM = 250.0  # –†–∞–¥–∏—É—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤ –∫–º

# def haversine(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
#     """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ (–≤ –∫–º)"""
#     R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
#     dlat = math.radians(lat2 - lat1)
#     dlon = math.radians(lon2 - lon1)
#     a = (math.sin(dlat/2)**2 + math.cos(math.radians(lat1)) * 
#          math.cos(math.radians(lat2)) * math.sin(dlon/2)**2)
#     return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

def km_per_degree_lon(lat: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å –¥–æ–ª–≥–æ—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–æ—Ç—ã"""
    return math.cos(math.radians(lat)) * KM_PER_DEGREE_LAT

# def from_pixel_to_lonlat(xp: float, yp: float, zoom: int) -> Tuple[float, float]:
#     """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ (Mercator)"""
#     PixelsAtZoom = TILE_SIZE * 2**zoom
#     lon = (xp - PixelsAtZoom/2) * (360 / PixelsAtZoom)
#     lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * yp / PixelsAtZoom)))
#     return lon, math.degrees(lat_rad)

def calculate_bearing_from_grid(i, j, lat_size, lon_size, pixel_size):
    """
    üìå –í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (bearing) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ç–∫–∏.
    """
    # üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (dx, dy)
    dx = (j - lon_size // 2) * pixel_size
    dy = (i - lat_size // 2) * pixel_size

    # üìå –í—ã—á–∏—Å–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
    bearing = math.degrees(math.atan2(dy, dx))  

    return bearing

def lonlat_to_nxny(lon: float, lat: float, center_lat: float, center_lon: float, 
                  nx_max: int, ny_max: int, bearing_angle: float) -> Tuple[int, int]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç lon/lat –≤ –∏–Ω–¥–µ–∫—Å—ã —Å–µ—Ç–∫–∏ nx, ny"""
    dx_km = (lon - center_lon) * km_per_degree_lon(center_lat)
    dy_km = (lat - center_lat) * KM_PER_DEGREE_LAT
    
    # –ü–æ–≤–æ—Ä–æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    angle_rad = math.radians(-bearing_angle)
    dx_rot = dx_km * math.cos(angle_rad) - dy_km * math.sin(angle_rad)
    dy_rot = dx_km * math.sin(angle_rad) + dy_km * math.cos(angle_rad)
    
    nx = nx_max//2 + int(dx_rot / (2 * GRID_RADIUS_KM / nx_max))
    ny = ny_max//2 - int(dy_rot / (2 * GRID_RADIUS_KM / ny_max))  # –ò–Ω–≤–µ—Ä—Å–∏—è Y
    
    return np.clip(nx, 0, nx_max-1), np.clip(ny, 0, ny_max-1)


def precompute_tile_coordinates(ds, nc_file, zoom_levels, center_lat, center_lon, tile_size=256):
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã x –∏ y –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - nc_file: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É NetCDF —Ñ–∞–π–ª—É
    - output_nc_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É NetCDF —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    - zoom_levels: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, [0, 1, 2, 3, 4, 5, 6])
    - center_lat: –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ç–∫–∏
    - center_lon: –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ç–∫–∏
    - tile_size: –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 256)
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        #ds = xr.open_dataset(f"{nc_file}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        ny_max, nx_max = ds.dims.get("ny", 0), ds.dims.get("nx", 0)
        if nx_max == 0 or ny_max == 0:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏ (nx –∏ ny)")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dataset –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coords_ds = ds.copy()
        
        for zoom in zoom_levels:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            num_tiles = 2 ** zoom
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            x_coords = np.zeros((num_tiles, num_tiles, tile_size, tile_size), dtype=np.float32)
            y_coords = np.zeros((num_tiles, num_tiles, tile_size, tile_size), dtype=np.float32)

            print(1)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            for tile_x in range(num_tiles):
                for tile_y in range(num_tiles):
                    # –ì—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–ª–∞
                    x1, y1 = tile_x * tile_size, tile_y * tile_size
                    x2, y2 = x1 + tile_size, y1 + tile_size

                    print(x1, y1)
                    
                    for yi in range(y1, y2):
                        for xi in range(x1, x2):
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            lon, lat = from_pixel_to_lonlat(xi, yi, zoom)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ –≤ —Ä–∞–¥–∏—É—Å —Å–µ—Ç–∫–∏
                            if haversine(lat, lon, center_lat, center_lon) > GRID_RADIUS_KM:
                                x_coords[tile_y, tile_x, yi-y1, xi-x1] = np.nan
                                y_coords[tile_y, tile_x, yi-y1, xi-x1] = np.nan
                                continue
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º bearing angle (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                            bearing_angle = calculate_bearing_from_grid(yi, xi, ny_max, nx_max, 1000)
                            
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å—ã —Å–µ—Ç–∫–∏
                            nx, ny = lonlat_to_nxny(lon, lat, center_lat, center_lon, nx_max, ny_max, bearing_angle)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            x_coords[tile_y, tile_x, yi-y1, xi-x1] = nx
                            y_coords[tile_y, tile_x, yi-y1, xi-x1] = ny
            
            print(2)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Dataset
            coords_ds[f"x_zoom_{zoom}"] = xr.DataArray(
                x_coords,
                dims=("tile_y", "tile_x", "pixel_y", "pixel_x"),
                attrs={"description": f"X coordinates for zoom level {zoom}"}
            )
            
            coords_ds[f"y_zoom_{zoom}"] = xr.DataArray(
                y_coords,
                dims=("tile_y", "tile_x", "pixel_y", "pixel_x"),
                attrs={"description": f"Y coordinates for zoom level {zoom}"}
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Dataset –≤ —Ñ–∞–π–ª
        coords_ds.to_netcdf(f"{nc_file}_updated.nc")
        coords_ds.close()
        ds.close()
        print(3)
        
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '{nc_file}_updated.nc'")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {str(e)}")
        raise

def calc_lon_lat():
    base_directory = './periods'
    periods = parse_folder_structure(base_directory)
    for el in periods:
        location_list = get_file_path(periods, el[0], True)
        for file_path in location_list:
            file = extract_nc_file(file_path)

            # process_file(file, f"{file}_updated.nc")
            ds = xr.open_dataset(file)
            #print(ds)
            # # print(ds)

            # tiles = calculate_tiles_in_radius(ds.attrs.get('lat_station'), ds.attrs.get('lon_station'), ds.attrs.get('radius_view'), 6)

            # print(tiles)

            # dims = ds.dims
            # ny_max, nx_max = dims.get("ny", 0), dims.get("nx", 0)

            # for x,y in tiles:
            #     ds = precalculate_tile_coords_dataset(ds, 6, x, y, ds.attrs.get('lat_station'), ds.attrs.get('lon_station'), nx_max, ny_max)
                
            # ds.to_netcdf(f"{file}_updated.nc", mode='a')

            precompute_tile_coordinates(ds, file, [7, 8, 9, 10, 11, 12], ds.attrs.get('lat_station'), ds.attrs.get('lon_station'))
            
            
            





if __name__ == "__main__":
    calc_lon_lat()